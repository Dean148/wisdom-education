package com.education.admin.api.controller.school;import com.education.common.base.BaseController;import com.education.common.model.ModelBeanMap;import com.education.common.utils.ObjectUtils;import com.education.common.utils.Result;import com.education.common.utils.ResultCode;import com.education.model.entity.SchoolInfo;import com.education.model.request.PageParam;import com.education.service.school.SchoolService;import io.swagger.annotations.*;import org.apache.shiro.authz.annotation.Logical;import org.apache.shiro.authz.annotation.RequiresPermissions;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.*;import java.util.Date;import java.util.Map;/** * 学校管理 * @author zengjintao * @create 2019/4/12 10:01 * @since 1.0 **/@RestController@RequestMapping("/system/school")@Api(tags = "学校管理")public class SchoolController extends BaseController {    @Autowired    private SchoolService schoolService;    /**     * 学校列表     * @param pageParam     * @param schoolInfo     * @return     */    @GetMapping    public Result list(PageParam pageParam, SchoolInfo schoolInfo) {        return Result.success(schoolService.selectPage(pageParam, schoolInfo));    }/*    @Autowired    private SchoolService schoolService;    @GetMapping    @RequiresPermissions("system:school:list")    @ApiOperation("学校列表")    @ApiImplicitParams({        @ApiImplicitParam(name = "offset", value = "分页起始行", defaultValue = "0", paramType = "query", required = true),        @ApiImplicitParam(name = "limit", value = "每页显示行数", defaultValue = "10", paramType = "query", required = true)    })    public Result<ModelBeanMap> list(@ApiParam(hidden = true) @RequestParam Map params) {        return schoolService.pagination(params);    }    @PostMapping("saveOrUpdate")    @RequiresPermissions(value = {"system:school:save", "system:school:update"}, logical = Logical.OR)    @ApiOperation("添加修改学校")    public Result saveOrUpdate(@RequestBody ModelBeanMap schoolMap) {        Integer id = schoolMap.getInt("id");        boolean updateFlag = false;        schoolMap.put("name", schoolMap.getStr("name"));        schoolMap.put("simplicity", schoolMap.get("simplicity"));        if (ObjectUtils.isNotEmpty(id)) {            updateFlag = true;            schoolMap.put("update_date", new Date());        }        return schoolService.saveOrUpdate(updateFlag, schoolMap);    }    @DeleteMapping    public ResultCode deleteById(@RequestBody ModelBeanMap schoolInfoMap) {        return schoolService.deleteById(schoolInfoMap);    }*/}