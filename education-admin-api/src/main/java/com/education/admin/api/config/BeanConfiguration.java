package com.education.admin.api.config;import com.education.common.cache.EhcacheBean;import com.education.common.constants.Constants;import com.education.common.model.JwtToken;import com.education.common.model.online.OnlineUserManager;import net.sf.ehcache.CacheManager;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;import java.io.InputStream;import java.util.concurrent.ThreadPoolExecutor;/** * 系统bean 配置 * @author zengjintao * @create 2019/3/29 14:01 * @since 1.0 **/@Configurationpublic class BeanConfiguration {    private static final int COUNT = Runtime.getRuntime().availableProcessors(); //cpu个数    private static final int CORE_SIZE = COUNT * 2;    private static final int MAX_SIZE = COUNT * 4;    /**     * 初始化线程池     * @return     */    @Bean    public ThreadPoolTaskExecutor threadPoolTaskExecutor() {        ThreadPoolTaskExecutor threadPoolTaskExecutor = new ThreadPoolTaskExecutor();        threadPoolTaskExecutor.setMaxPoolSize(MAX_SIZE);        threadPoolTaskExecutor.setCorePoolSize(CORE_SIZE);        threadPoolTaskExecutor.setQueueCapacity(20);        threadPoolTaskExecutor.setKeepAliveSeconds(200);        threadPoolTaskExecutor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());        return threadPoolTaskExecutor;    }    @Bean    public CacheManager cacheManager() {        InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream("ehcache.xml");        return CacheManager.create(inputStream);    }    @Bean    public EhcacheBean ehcacheBean(CacheManager cacheManager) {        return new EhcacheBean(cacheManager);    }    @Bean    public OnlineUserManager onlineUserManager() {        return new OnlineUserManager();    }    @Bean    public JwtToken frontJwtToken() {        return new JwtToken(Constants.EDUCATION_FRONT_SECRET_KEY);    }    @Bean    public JwtToken adminJwtToken() {        return new JwtToken(Constants.EDUCATION_ADMIN_SECRET_KEY);    }  /*  @Bean    public ApiConfig apiConfig(WeChatInfo weChatInfo) {        ApiConfig apiConfig = new ApiConfig();        apiConfig.setAppId(weChatInfo.getAppId());        apiConfig.setAppSecret(weChatInfo.getAppSecret());        ApiConfigKit.setThreadLocalAppId(weChatInfo.getAppId());        ApiConfigKit.putApiConfig(apiConfig);        return apiConfig;    }*/}